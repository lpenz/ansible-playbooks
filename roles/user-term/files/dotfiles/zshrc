# lpenz .zshrc

DISABLE_AUTO_TITLE=true

# tramp (https://www.emacswiki.org/emacs/TrampMode#toc6)
if [[ "$TERM" == "dumb" ]]
then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    unfunction precmd 2>/dev/null
    unfunction preexec 2>/dev/null
    PS1='$ '
    return
fi

# POWERLEVEL9K prompt:
if [ "$(ps -o ppid= $$ | xargs ps -o fname=)" = "xfce4-te" ]; then
    export LC_POWERLINE_FONTS=true
fi
if [ "$LC_POWERLINE_FONTS" = "true" ]; then
    # Enable nerdfont in xfce terminal only
    POWERLEVEL9K_MODE='nerdfont-complete'
fi
if [[ "$UID" -eq 0 ]]; then
    prompt_user_indicator() {
        "$1_prompt_segment" "$0" "$2" "$DEFAULT_COLOR" "yellow" "" 'ROOT_ICON'
    }
else
    prompt_user_indicator() {
        "$1_prompt_segment" "$0" "$2" "$DEFAULT_COLOR" "blue" "\uf295" ""
    }
fi
if [[ "$UID" -eq 0 || "$USER" = "lpenz" ]]; then
    POWERLEVEL9K_CONTEXT_TEMPLATE=%m
fi
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user_indicator)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(background_jobs context dir)

# zplug:
if [[ ! -d ~/.zplug ]]; then
    git clone https://github.com/zplug/zplug ~/.zplug
    source ~/.zplug/init.zsh && zplug update --self
else
    source ~/.zplug/init.zsh
fi
zplug "lib/completion", from:oh-my-zsh
zplug "lib/history", from:oh-my-zsh
zplug "lib/termsupport", from:oh-my-zsh
zplug "plugins/bgnotify", from:oh-my-zsh
zplug "plugins/z", from:oh-my-zsh
zplug "plugins/colored-man-pages", from:oh-my-zsh
zplug "plugins/go", from:oh-my-zsh
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-history-substring-search"
zplug "joel-porquet/zsh-dircolors-solarized", hook-load:"setupsolarized dircolors.ansi-dark"
zplug "bhilburn/powerlevel9k", use:powerlevel9k.zsh-theme
zplug 'zplug/zplug', hook-build:'zplug --self-manage'
if ! zplug check --verbose; then
    echo "Plugins not installed, please run"
    echo "zplug install"
fi
zplug load # source plugins and add commands to $PATH

zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down

# PROMPT='%(?,%{$fg[white]%},%{$fg[red]%}) %% '

# Custom configs:
WORDCHARS="*?_-.[]~=/&;!#$%^(){}<>"
setopt no_share_history
setopt clobber

# Hotkeys:
zmodload zsh/complist
bindkey -M menuselect '^J' accept-and-infer-next-history
bindkey -M menuselect '^H' undo
bindkey -M menuselect '^K' vi-insert
bindkey "\ej" accept-and-menu-complete
bindkey "\el" copy-prev-shell-word
bindkey -s "\e[21~" "\033q\025mymake\012"
bindkey -s "\er" "\033q\025i=0; while ! read -t 1 && ! !!; do i=\$((i+1)); echo \"======== \$i \$(date)\";  done"

# env config
export VISUAL=vim
export EDITOR=vim
export ALTERNATE_EDITOR=/usr/bin/vim
export PAGER=

# aliases
alias rxvt-font-set="printf '\e]710;%s\007' "
alias vi=nvim
alias ls="ls --color"
alias grep='grep  --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'

# Load keychain
if which keychain &> /dev/null; then
   for f in "$HOME/.ssh/id_rsa" "$HOME/.ssh/id_dsa"; do
      if [ -e "$f" ]; then
         eval `keychain -q --eval --agents ssh $f`
      fi
   done
fi

ulimit -v 4000000

# Runs before executing a command
function lpenz_preexec {
    emulate -L zsh
    setopt extended_glob

    # cmd name only, or if this is sudo or ssh, the next cmd
    local CMD=${1[(wr)^(*=*|sudo|ssh|rake|-*)]:gs/%/%%}
    local LINE="${2:gs/%/%%}"

    title '$CMD' '%100>...>$LINE%<<'
}

# Runs after executing a command, before showing the prompt
function lpenz_precmd {
    title "%m:%~" "%m:%~"

    if [ "$RETVAL" != 0 ] || (( _P9K_COMMAND_DURATION > 3 )); then
        if [ "$RETVAL" != 0 ]; then
            local color=red
        else
            local color=green
        fi
        print -nP "%K{$color}\x1b[38;2;0;0;0m\ue0b8%f %f%K{$color}"
        if [ "$RETVAL" != 0 ]; then
            print -nP "\ue685 $RETVAL"
        fi
        if (( _P9K_COMMAND_DURATION > 3 )); then
            local humanReadableDuration
            if (( _P9K_COMMAND_DURATION > 3600 )); then
                humanReadableDuration=$(TZ=GMT; strftime '%H:%M:%S' $(( int(rint(_P9K_COMMAND_DURATION)) )))
            elif (( _P9K_COMMAND_DURATION > 60 )); then
                humanReadableDuration=$(TZ=GMT; strftime '%M:%S' $(( int(rint(_P9K_COMMAND_DURATION)) )))
            else
                typeset -F 2 humanReadableDuration
                humanReadableDuration=$_P9K_COMMAND_DURATION
            fi
            print -nP " ${icons[EXECUTION_TIME_ICON]}  $humanReadableDuration"
        fi
        print -P " %K{$color}\x1b[38;2;0;0;0m\ue0ba "
    fi
}

preexec_functions+=(lpenz_preexec)
precmd_functions+=(lpenz_precmd)

# do not beep
setterm --blength 0 2>/dev/null 

# fzf setup, C-r rocks
if [ -f "$HOME/.nix-profile/share/fzf/completion.zsh" ]; then
    . "$HOME/.nix-profile/share/fzf/completion.zsh"
    . "$HOME/.nix-profile/share/fzf/key-bindings.zsh"
fi

# Local customizations
if test -r ~/.zshrc.local; then . ~/.zshrc.local; fi
