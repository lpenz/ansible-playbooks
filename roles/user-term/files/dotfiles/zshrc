# -*- shell-script -*-

# lpenz .zshrc

DISABLE_AUTO_TITLE=true

# tramp (https://www.emacswiki.org/emacs/TrampMode#toc6)
if [[ "$TERM" == "dumb" ]]
then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    unfunction precmd 2>/dev/null
    unfunction preexec 2>/dev/null
    PS1='$ '
    return
fi

# Local zsh, namespace trampoline
if test -r ~/.zshrc.local.pre; then . ~/.zshrc.local.pre; fi

if ! [ -d "$HOME/.zinit/bin" ]; then
   mkdir -p "$HOME/.zinit"
   rm -rf "$HOME/.zinit/bin"
   git clone https://github.com/zdharma/zinit.git "$HOME/.zinit/bin"
fi

function lpenz_powerlevel9k_setup {
    typeset -g POWERLEVEL9K_MODE=ascii

    if [[ "$UID" -eq 0 ]]; then
        prompt_lpenz_user_indicator() {
            p10k segment -f yellow -t '#'
        }
    else
        prompt_lpenz_user_indicator() {
            p10k segment -f blue -t '%%'
        }
    fi
    if [[ "$UID" -eq 0 || "$USER" = "lpenz" ]]; then
        POWERLEVEL9K_CONTEXT_TEMPLATE=%m
    fi

    GITSTATUS_NUM_THREADS=1
    GITSTATUS_DIR="$HOME/.zinit/plugins/romkatv---powerlevel10k/gitstatus/bin"
    GITSTATUS_DAEMON_CANDIDATES=( "gitstatusd-linux-x86_64-static" "gitstatusd-linux-armv8l" "gitstatusd-linux-armv7l" )
    for g in "${GITSTATUS_DAEMON_CANDIDATES[@]}"; do
        gitstatusd="$GITSTATUS_DIR/$g"
        if "$gitstatusd" -h &>/dev/null; then
            GITSTATUS_DAEMON="$gitstatusd"
        fi
    done
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(lpenz_user_indicator)
    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(background_jobs vcs context dir)
}

function lpenz_completion_setup {
    WORDCHARS="*?_-.[]~=/&;!#$%^(){}<>"
    bindkey -M menuselect '^J' accept-and-infer-next-history
    bindkey -M menuselect '^H' undo
    bindkey -M menuselect '^K' vi-insert
}

# plugin management

# zinit {
source ~/.zinit/bin/zinit.zsh
zinit ice lucid
zinit snippet OMZ::lib/termsupport.zsh
zinit ice lucid wait'!0'
zinit snippet OMZ::lib/completion.zsh
zinit ice lucid wait'0'
zinit snippet OMZ::lib/key-bindings.zsh
zinit ice lucid wait'0'
zinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh
zinit ice lucid wait'0'
zinit load zsh-users/zsh-completions
zinit ice lucid
zinit snippet OMZ::lib/history.zsh
zinit ice lucid wait'!0'
zinit snippet OMZ::plugins/history/history.plugin.zsh
zinit ice lucid wait'0'
zinit snippet OMZ::plugins/direnv/direnv.plugin.zsh
zinit ice lucid wait'0'
zinit load zsh-users/zsh-history-substring-search
zinit ice wait'!0' lucid atload'setupsolarized dircolors.ansi-dark'
zinit load 'joel-porquet/zsh-dircolors-solarized'
zinit ice lucid wait'0'
zinit load 'lpenz/zsh-notify-urxvt'
zinit ice lucid src'powerlevel10k.zsh-theme' atinit'lpenz_powerlevel9k_setup'
zinit load 'romkatv/powerlevel10k'
zinit ice lucid from"gh-r" as"program"
zinit load junegunn/fzf-bin
zinit ice lucid wait'0' from"gh" 
zinit snippet https://github.com/junegunn/fzf/blob/master/shell/completion.zsh
zinit ice lucid wait'0' from"gh" 
zinit snippet https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh
zinit ice lucid wait'!2' atinit'zpcompinit; zpcdreplay' atload'lpenz_completion_setup'
zinit load 'zdharma/fast-syntax-highlighting'
# } zinit

zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down

# Custom configs:
setopt no_share_history
setopt clobber

# Hotkeys:
bindkey "\ej" accept-and-menu-complete
bindkey -s "\e[21~" "\033q\025mymake\012"
bindkey -s "\er" "\033q\025i=0; while ! read -t 1 && ! !!; do i=\$((i+1)); echo \"======== \$i \$(date)\";  done"
autoload -U copy-earlier-word
zle -N copy-earlier-word
bindkey "\e;" copy-earlier-word
bindkey -r "\el"
bindkey "\ek" accept-and-hold

# env config
export VISUAL=vim
export EDITOR=vim
export ALTERNATE_EDITOR=/usr/bin/vim
export PAGER=cat

# aliases
alias rxvt-font-set="printf '\e]710;%s\007' "
alias ssh-nohostkey="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
alias ls="ls --color=tty"
alias ll="ls -l"
alias grep='grep  --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
alias gtags='gtags-lpenz-wrapper'

# Load keychain
if which keychain &> /dev/null; then
   for f in "$HOME/.ssh/id_rsa" "$HOME/.ssh/id_dsa"; do
      if [ -e "$f" ]; then
         eval `keychain -q --eval --agents ssh $f`
      fi
   done
fi

ulimit -v 4000000

typeset -gF _lpenz_timer_start=0

# Runs before executing a command
function lpenz_preexec {
    emulate -L zsh
    setopt extended_glob

    # cmd name only, or if this is sudo or ssh, the next cmd
    local CMD=${1[(wr)^(*=*|sudo|ssh|rake|-*)]:gs/%/%%}
    local LINE="${2:gs/%/%%}"

    title '$CMD' '%100>...>$LINE%<<'
    _lpenz_timer_start=EPOCHREALTIME
}
preexec_functions+=(lpenz_preexec)

function humanReadableDurationRender {
    local humanReadableDuration
    local -F duration="$1"
    if (( duration > 3600 )); then
        humanReadableDuration=$(TZ=GMT; strftime '%H:%M:%S' $(( int(rint(duration)) )))
    elif (( duration > 60 )); then
        humanReadableDuration=$(TZ=GMT; strftime '%M:%S' $(( int(rint(duration)) )))
    else
        typeset -F 2 humanReadableDuration
        humanReadableDuration=$duration
    fi
    echo "$humanReadableDuration"
}

# Runs after executing a command, before showing the prompt
function lpenz_lastcmdstatus {
    local -F duration=0
    if (( _lpenz_timer_start )); then
        duration=$((EPOCHREALTIME - _lpenz_timer_start))
    fi
    if [ "$_lpenz_status" != 0 ] || (( duration > 3 )); then
        if [ "$_lpenz_status" != 0 ]; then
            local color=red
        else
            local color=green
        fi
        print -nP "%K{$color}\e[38;5;16m\ue0b8%f %f%K{$color}"
        if [ "$_lpenz_status" != 0 ]; then
            print_icon FAIL_ICON
            print -nP " $_lpenz_status"
        else
            print_icon OK_ICON
        fi
        if (( duration > 3 )); then
            local humanReadableDuration=$(humanReadableDurationRender $duration)
            print -nP "  ${icons[EXECUTION_TIME_ICON]} $humanReadableDuration"
            print -nP "  \u231a $(strftime '%F %T' $EPOCHSECONDS)"
        fi
        print -P " %K{$color}\e[38;5;16m\ue0ba\e[0m \n"
    fi
    _lpenz_timer_start=0
}

function lpenz_precmd {
    _lpenz_status=$?
    title "%m:%~" "%m:%~"
    lpenz_lastcmdstatus
}
precmd_functions+=(lpenz_precmd)

# do not beep
setterm --blength 0 2>/dev/null 

# Local customizations
if test -r ~/.zshrc.local; then . ~/.zshrc.local; fi

# keep this comment here to avoid auto-insertion:
# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
